label = as.character(unique(Scripts$Script))) %>%
separate(label, into = c(NA, "label"), sep = "~/R scripts/")
Edges <- full_join(From, To) %>%                                          # Join Tos and Froms by the shared object
drop_na() %>%
bind_rows(filter(all, is.na(Object)))  %>%                              # Add in the relationships to functions files, which aren't mediated by an object
distinct() %>%                                                          # Clean until I figure out how to drop the white space
left_join(nodes, by = c("From" = "label")) %>%                          # add in numerical code for scripts
select(-From, from = id) %>%                                            # relabel
left_join(nodes, by = c("To" = "label")) %>%                            # repeat relabelling for to column
select(-To, to = id) %>%
mutate(arrows = "middle")                                               # Add arrows in the middle of the edge when plotting
nodes <- mutate(nodes, shape = ifelse(grepl("FUNCTIONS", label),"diamond", "dot")) %>% # Add shape to nodes now join is finished
separate(label, into = c("group", NA), remove = F)                         # Add a group field for colour
##### Graph it ####
library(visNetwork)
visNetwork(nodes, Edges, width = "100%", height = "750") %>%          # Build the network
visLayout(randomSeed = 200) %>%                                            # Control the randomisation of the layout
visLegend(width = 0.15) %>%                                      # Add a legend
visOptions(highlightNearest = list(enabled = TRUE, labelOnly = FALSE),     # Control the highlighting when you select a script
nodesIdSelection = TRUE) %>%                                    # Allow the user to select a script from a drop down list
visGroups(groupname = "bathymetry", shape = "dot", color = list(background = "grey", border = "black", # Control colouring and highlighting per group
highlight = list(background = "white", border = "black"))) %>%
visGroups(groupname = "NM", shape = "dot",color = list(background = "orange", border = "darkorange",
highlight = list(background = "white", border = "darkorange"))) %>%
visGroups(groupname = "bounds", shape = "dot", color = list(background = "#97C2FC", border = "#2B7CE9",
highlight = list(background = "white", border = "#2B7CE9"))) %>%
visGroups(groupname = "gfw", shape = "dot",color = list(background = "violet", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "ices", shape = "dot",color = list(background = "purple", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "sediment", shape = "dot", color = list(background = "yellow", border = "orange",
highlight = list(background = "white", border = "orange"))) %>%
visGroups(groupname = "StrathE2E", shape = "dot", color = list(background = "green", border = "darkgreen",
highlight = list(background = "white", border = "darkgreen")))
# visSave(toy, file = "code network.html")                                    # Save as HTML file
View(To)
View(From)
Edges <- full_join(From, To) %>%                                          # Join Tos and Froms by the shared object
drop_na() %>%
bind_rows(filter(all, is.na(Object)))  %>%                              # Add in the relationships to functions files, which aren't mediated by an object
#  distinct() %>%                                                          # Clean until I figure out how to drop the white space
left_join(nodes, by = c("From" = "label")) %>%                          # add in numerical code for scripts
select(-From, from = id) %>%                                            # relabel
left_join(nodes, by = c("To" = "label")) %>%                            # repeat relabelling for to column
select(-To, to = id) %>%
mutate(arrows = "middle")                                               # Add arrows in the middle of the edge when plotting
View(Edges)
## Automatically trawl my R scripts to find objects being written and read,
## and then connect these scripts for a network graph
library(tidyverse)
Scripts <- list.files("~/R scripts",  pattern = ".R", full.names = T) %>% # Read in all the Rscripts
as.data.frame() %>%
filter(!grepl('@|X_|Z_', .)) %>%                                        # Ignore files labelled in these ways
mutate(Script = as.character(.)) %>%
separate(Script, into = c(NA, "Script"), sep = "R scripts") %>%         # Drop long, specific, path lead
mutate(Script = paste0("~/R scripts", Script)) %>%                      # Replace with relative path lead
select(-.)
Links <- function(script) {
#script <- Scripts[16,1]                                                  # Testing
example <- readLines(script)                                              # Get each line in a script as a character vector
imports <- grepl("readRDS\\(", example)                                   # Which lines use readRDS
exports <- grepl("saveRDS\\(", example)                                   # Which lines use saveRDS
functions <- grepl("source\\(", example)                                  # Does the script call a function file?
From <- example[exports] %>%                                              # Which objects come from this script
data.frame(Object = .) %>%                                              # A column of objects being saved
mutate(Object = as.character(Object),
From = script) %>%                                               # Attach the script name
separate(From, into = c(NA, "From"), sep = "~/R scripts/") %>%          # Shrink the script name
separate(Object, into = c(NA, "Object"), sep = "[~)]")                  # Isolate the object name between "~ and )"
To <- example[imports] %>%                                                # Which objects are read into this script
data.frame(Object = .) %>%
mutate(Object = as.character(Object),
To = script) %>%
separate(To, into = c(NA, "To"), sep = "~/R scripts/") %>%              # Shrink the script name
separate(Object, into = c(NA, "Object"), sep = "[~)]")                  # Isolate the file name between "~ and )"
Functions <- example[functions] %>%
data.frame(From = .) %>%
mutate(From = as.character(From),
To = script) %>%
separate(From, into = c(NA, "From"), sep = "~/R scripts/") %>%          # Shrink the script name
separate(To, into = c(NA, "To"), sep = "~/R scripts/") %>%              # Shrink the script name
separate(From, into = c("From", NA), sep = " ") %>%                     # Shrink the script name
mutate(From = paste(From, "FUNCTIONS.R"))
Links <- bind_rows(From, To) %>%
bind_rows(Functions)
return(Links)
}    # Function to return the files read and saved by a script, and any function files called
#### Establish the relations file ####
Scripts2 <- filter(Scripts, !grepl('FUNCTIONS', Scripts$Script))          # Ignore functions files as relationships aren't object mediated (but keep Scripts for defining nodes later)
all <- map(Scripts2[,1], Links) %>%                                       # Check for links in all R scripts
bind_rows()
From <- select(all, -To) %>%                                              # Grab just the files creating objects
drop_na()
To <- select(all, -From) %>%                                              # Grab just the files reading in objects
drop_na()
#### Format for a network graph ####
nodes <- data.frame(id = seq(1:length(unique(Scripts$Script))),
label = as.character(unique(Scripts$Script))) %>%
separate(label, into = c(NA, "label"), sep = "~/R scripts/")
Edges <- full_join(From, To) %>%                                          # Join Tos and Froms by the shared object
drop_na() %>%
bind_rows(filter(all, is.na(Object)))  %>%                              # Add in the relationships to functions files, which aren't mediated by an object
#  distinct() %>%                                                          # Clean until I figure out how to drop the white space
left_join(nodes, by = c("From" = "label")) %>%                          # add in numerical code for scripts
select(-From, from = id) %>%                                            # relabel
left_join(nodes, by = c("To" = "label")) %>%                            # repeat relabelling for to column
select(-To, to = id) %>%
mutate(arrows = "middle")                                               # Add arrows in the middle of the edge when plotting
nodes <- mutate(nodes, shape = ifelse(grepl("FUNCTIONS", label),"diamond", "dot")) %>% # Add shape to nodes now join is finished
separate(label, into = c("group", NA), remove = F)                         # Add a group field for colour
##### Graph it ####
library(visNetwork)
visNetwork(nodes, Edges, width = "100%", height = "750") %>%          # Build the network
visLayout(randomSeed = 200) %>%                                            # Control the randomisation of the layout
visLegend(width = 0.15) %>%                                      # Add a legend
visOptions(highlightNearest = list(enabled = TRUE, labelOnly = FALSE),     # Control the highlighting when you select a script
nodesIdSelection = TRUE) %>%                                    # Allow the user to select a script from a drop down list
visGroups(groupname = "bathymetry", shape = "dot", color = list(background = "grey", border = "black", # Control colouring and highlighting per group
highlight = list(background = "white", border = "black"))) %>%
visGroups(groupname = "NM", shape = "dot",color = list(background = "orange", border = "darkorange",
highlight = list(background = "white", border = "darkorange"))) %>%
visGroups(groupname = "bounds", shape = "dot", color = list(background = "#97C2FC", border = "#2B7CE9",
highlight = list(background = "white", border = "#2B7CE9"))) %>%
visGroups(groupname = "gfw", shape = "dot",color = list(background = "violet", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "ices", shape = "dot",color = list(background = "purple", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "sediment", shape = "dot", color = list(background = "yellow", border = "orange",
highlight = list(background = "white", border = "orange"))) %>%
visGroups(groupname = "StrathE2E", shape = "dot", color = list(background = "green", border = "darkgreen",
highlight = list(background = "white", border = "darkgreen")))
# visSave(toy, file = "code network.html")                                    # Save as HTML file
Edges <- full_join(From, To) %>%                                          # Join Tos and Froms by the shared object
drop_na() %>%
bind_rows(filter(all, is.na(Object)))  %>%                              # Add in the relationships to functions files, which aren't mediated by an object
distinct() %>%                                                          # Clean until I figure out how to drop the white space
left_join(nodes, by = c("From" = "label")) %>%                          # add in numerical code for scripts
select(-From, from = id) %>%                                            # relabel
left_join(nodes, by = c("To" = "label")) %>%                            # repeat relabelling for to column
select(-To, to = id) %>%
mutate(arrows = "middle")                                               # Add arrows in the middle of the edge when plotting
Edges <- full_join(From, To) %>%                                          # Join Tos and Froms by the shared object
drop_na() %>%
bind_rows(filter(all, is.na(Object)))  %>%                              # Add in the relationships to functions files, which aren't mediated by an object
# distinct() %>%                                                          # Clean until I figure out how to drop the white space
left_join(nodes, by = c("From" = "label")) %>%                          # add in numerical code for scripts
select(-From, from = id) %>%                                            # relabel
left_join(nodes, by = c("To" = "label")) %>%                            # repeat relabelling for to column
select(-To, to = id) %>%
mutate(arrows = "middle")                                               # Add arrows in the middle of the edge when plotting
View(Edges)
visNetwork(nodes, Edges, width = "100%", height = "750") %>%          # Build the network
visLayout(randomSeed = 100) %>%                                            # Control the randomisation of the layout
visLegend(width = 0.15) %>%                                      # Add a legend
visOptions(highlightNearest = list(enabled = TRUE, labelOnly = FALSE),     # Control the highlighting when you select a script
nodesIdSelection = TRUE) %>%                                    # Allow the user to select a script from a drop down list
visGroups(groupname = "bathymetry", shape = "dot", color = list(background = "grey", border = "black", # Control colouring and highlighting per group
highlight = list(background = "white", border = "black"))) %>%
visGroups(groupname = "NM", shape = "dot",color = list(background = "orange", border = "darkorange",
highlight = list(background = "white", border = "darkorange"))) %>%
visGroups(groupname = "bounds", shape = "dot", color = list(background = "#97C2FC", border = "#2B7CE9",
highlight = list(background = "white", border = "#2B7CE9"))) %>%
visGroups(groupname = "gfw", shape = "dot",color = list(background = "violet", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "ices", shape = "dot",color = list(background = "purple", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "sediment", shape = "dot", color = list(background = "yellow", border = "orange",
highlight = list(background = "white", border = "orange"))) %>%
visGroups(groupname = "StrathE2E", shape = "dot", color = list(background = "green", border = "darkgreen",
highlight = list(background = "white", border = "darkgreen")))
visNetwork(nodes, Edges, width = "100%", height = "750") %>%          # Build the network
visLayout(randomSeed = 500) %>%                                            # Control the randomisation of the layout
visLegend(width = 0.15) %>%                                      # Add a legend
visOptions(highlightNearest = list(enabled = TRUE, labelOnly = FALSE),     # Control the highlighting when you select a script
nodesIdSelection = TRUE) %>%                                    # Allow the user to select a script from a drop down list
visGroups(groupname = "bathymetry", shape = "dot", color = list(background = "grey", border = "black", # Control colouring and highlighting per group
highlight = list(background = "white", border = "black"))) %>%
visGroups(groupname = "NM", shape = "dot",color = list(background = "orange", border = "darkorange",
highlight = list(background = "white", border = "darkorange"))) %>%
visGroups(groupname = "bounds", shape = "dot", color = list(background = "#97C2FC", border = "#2B7CE9",
highlight = list(background = "white", border = "#2B7CE9"))) %>%
visGroups(groupname = "gfw", shape = "dot",color = list(background = "violet", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "ices", shape = "dot",color = list(background = "purple", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "sediment", shape = "dot", color = list(background = "yellow", border = "orange",
highlight = list(background = "white", border = "orange"))) %>%
visGroups(groupname = "StrathE2E", shape = "dot", color = list(background = "green", border = "darkgreen",
highlight = list(background = "white", border = "darkgreen")))
visNetwork(nodes, Edges, width = "100%", height = "750") %>%          # Build the network
visLayout(randomSeed = 10) %>%                                            # Control the randomisation of the layout
visLegend(width = 0.15) %>%                                      # Add a legend
visOptions(highlightNearest = list(enabled = TRUE, labelOnly = FALSE),     # Control the highlighting when you select a script
nodesIdSelection = TRUE) %>%                                    # Allow the user to select a script from a drop down list
visGroups(groupname = "bathymetry", shape = "dot", color = list(background = "grey", border = "black", # Control colouring and highlighting per group
highlight = list(background = "white", border = "black"))) %>%
visGroups(groupname = "NM", shape = "dot",color = list(background = "orange", border = "darkorange",
highlight = list(background = "white", border = "darkorange"))) %>%
visGroups(groupname = "bounds", shape = "dot", color = list(background = "#97C2FC", border = "#2B7CE9",
highlight = list(background = "white", border = "#2B7CE9"))) %>%
visGroups(groupname = "gfw", shape = "dot",color = list(background = "violet", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "ices", shape = "dot",color = list(background = "purple", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "sediment", shape = "dot", color = list(background = "yellow", border = "orange",
highlight = list(background = "white", border = "orange"))) %>%
visGroups(groupname = "StrathE2E", shape = "dot", color = list(background = "green", border = "darkgreen",
highlight = list(background = "white", border = "darkgreen")))
## Automatically trawl my R scripts to find objects being written and read,
## and then connect these scripts for a network graph
library(tidyverse)
Scripts <- list.files("~/R scripts",  pattern = ".R", full.names = T) %>% # Read in all the Rscripts
as.data.frame() %>%
filter(!grepl('@|X_|Z_', .)) %>%                                        # Ignore files labelled in these ways
mutate(Script = as.character(.)) %>%
separate(Script, into = c(NA, "Script"), sep = "R scripts") %>%         # Drop long, specific, path lead
mutate(Script = paste0("~/R scripts", Script)) %>%                      # Replace with relative path lead
select(-.)
Links <- function(script) {
#script <- Scripts[16,1]                                                  # Testing
example <- readLines(script)                                              # Get each line in a script as a character vector
imports <- grepl("readRDS\\(", example)                                   # Which lines use readRDS
exports <- grepl("saveRDS\\(", example)                                   # Which lines use saveRDS
functions <- grepl("source\\(", example)                                  # Does the script call a function file?
From <- example[exports] %>%                                              # Which objects come from this script
data.frame(Object = .) %>%                                              # A column of objects being saved
mutate(Object = as.character(Object),
From = script) %>%                                               # Attach the script name
separate(From, into = c(NA, "From"), sep = "~/R scripts/") %>%          # Shrink the script name
separate(Object, into = c(NA, "Object"), sep = "[~)]")                  # Isolate the object name between "~ and )"
To <- example[imports] %>%                                                # Which objects are read into this script
data.frame(Object = .) %>%
mutate(Object = as.character(Object),
To = script) %>%
separate(To, into = c(NA, "To"), sep = "~/R scripts/") %>%              # Shrink the script name
separate(Object, into = c(NA, "Object"), sep = "[~)]")                  # Isolate the file name between "~ and )"
Functions <- example[functions] %>%
data.frame(From = .) %>%
mutate(From = as.character(From),
To = script) %>%
separate(From, into = c(NA, "From"), sep = "~/R scripts/") %>%          # Shrink the script name
separate(To, into = c(NA, "To"), sep = "~/R scripts/") %>%              # Shrink the script name
separate(From, into = c("From", NA), sep = " ") %>%                     # Shrink the script name
mutate(From = paste(From, "FUNCTIONS.R"))
Links <- bind_rows(From, To) %>%
bind_rows(Functions)
return(Links)
}    # Function to return the files read and saved by a script, and any function files called
#### Establish the relations file ####
Scripts2 <- filter(Scripts, !grepl('FUNCTIONS', Scripts$Script))          # Ignore functions files as relationships aren't object mediated (but keep Scripts for defining nodes later)
all <- map(Scripts2[,1], Links) %>%                                       # Check for links in all R scripts
bind_rows()
From <- select(all, -To) %>%                                              # Grab just the files creating objects
drop_na()
To <- select(all, -From) %>%                                              # Grab just the files reading in objects
drop_na()
#### Format for a network graph ####
nodes <- data.frame(id = seq(1:length(unique(Scripts$Script))),
label = as.character(unique(Scripts$Script))) %>%
separate(label, into = c(NA, "label"), sep = "~/R scripts/")
Edges <- full_join(From, To) %>%                                          # Join Tos and Froms by the shared object
drop_na() %>%
bind_rows(filter(all, is.na(Object)))  %>%                              # Add in the relationships to functions files, which aren't mediated by an object
distinct() %>%                                                          # Remove any repeated links
left_join(nodes, by = c("From" = "label")) %>%                          # add in numerical code for scripts
select(-From, from = id) %>%                                            # relabel
left_join(nodes, by = c("To" = "label")) %>%                            # repeat relabelling for to column
select(-To, to = id) %>%
mutate(arrows = "middle")                                               # Add arrows in the middle of the edge when plotting
nodes <- mutate(nodes, shape = ifelse(grepl("FUNCTIONS", label),"diamond", "dot")) %>% # Add shape to nodes now join is finished
separate(label, into = c("group", NA), remove = F)                         # Add a group field for colour
##### Graph it ####
library(visNetwork)
visNetwork(nodes, Edges, width = "100%", height = "750") %>%          # Build the network
visLayout(randomSeed = 10) %>%                                            # Control the randomisation of the layout
visLegend(width = 0.15) %>%                                      # Add a legend
visOptions(highlightNearest = list(enabled = TRUE, labelOnly = FALSE),     # Control the highlighting when you select a script
nodesIdSelection = TRUE) %>%                                    # Allow the user to select a script from a drop down list
visGroups(groupname = "bathymetry", shape = "dot", color = list(background = "grey", border = "black", # Control colouring and highlighting per group
highlight = list(background = "white", border = "black"))) %>%
visGroups(groupname = "NM", shape = "dot",color = list(background = "orange", border = "darkorange",
highlight = list(background = "white", border = "darkorange"))) %>%
visGroups(groupname = "bounds", shape = "dot", color = list(background = "#97C2FC", border = "#2B7CE9",
highlight = list(background = "white", border = "#2B7CE9"))) %>%
visGroups(groupname = "gfw", shape = "dot",color = list(background = "violet", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "ices", shape = "dot",color = list(background = "purple", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "sediment", shape = "dot", color = list(background = "yellow", border = "orange",
highlight = list(background = "white", border = "orange"))) %>%
visGroups(groupname = "StrathE2E", shape = "dot", color = list(background = "green", border = "darkgreen",
highlight = list(background = "white", border = "darkgreen")))
# visSave(toy, file = "code network.html")                                    # Save as HTML file
## Automatically trawl my R scripts to find objects being written and read,
## and then connect these scripts for a network graph
library(tidyverse)
Scripts <- list.files("~/R scripts",  pattern = ".R", full.names = T) %>% # Read in all the Rscripts
as.data.frame() %>%
filter(!grepl('@|X_|Z_', .)) %>%                                        # Ignore files labelled in these ways
mutate(Script = as.character(.)) %>%
separate(Script, into = c(NA, "Script"), sep = "R scripts") %>%         # Drop long, specific, path lead
mutate(Script = paste0("~/R scripts", Script)) %>%                      # Replace with relative path lead
select(-.)
Links <- function(script) {
#script <- Scripts[16,1]                                                  # Testing
example <- readLines(script)                                              # Get each line in a script as a character vector
imports <- grepl("readRDS\\(", example)                                   # Which lines use readRDS
exports <- grepl("saveRDS\\(", example)                                   # Which lines use saveRDS
functions <- grepl("source\\(", example)                                  # Does the script call a function file?
From <- example[exports] %>%                                              # Which objects come from this script
data.frame(Object = .) %>%                                              # A column of objects being saved
mutate(Object = as.character(Object),
From = script) %>%                                               # Attach the script name
separate(From, into = c(NA, "From"), sep = "~/R scripts/") %>%          # Shrink the script name
separate(Object, into = c(NA, "Object"), sep = "[~)]")                  # Isolate the object name between "~ and )"
To <- example[imports] %>%                                                # Which objects are read into this script
data.frame(Object = .) %>%
mutate(Object = as.character(Object),
To = script) %>%
separate(To, into = c(NA, "To"), sep = "~/R scripts/") %>%              # Shrink the script name
separate(Object, into = c(NA, "Object"), sep = "[~)]")                  # Isolate the file name between "~ and )"
Functions <- example[functions] %>%
data.frame(From = .) %>%
mutate(From = as.character(From),
To = script) %>%
separate(From, into = c(NA, "From"), sep = "~/R scripts/") %>%          # Shrink the script name
separate(To, into = c(NA, "To"), sep = "~/R scripts/") %>%              # Shrink the script name
separate(From, into = c("From", NA), sep = " ") %>%                     # Shrink the script name
mutate(From = paste(From, "FUNCTIONS.R"))
Links <- bind_rows(From, To) %>%
bind_rows(Functions)
return(Links)
}    # Function to return the files read and saved by a script, and any function files called
#### Establish the relations file ####
Scripts2 <- filter(Scripts, !grepl('FUNCTIONS', Scripts$Script))          # Ignore functions files as relationships aren't object mediated (but keep Scripts for defining nodes later)
all <- map(Scripts2[,1], Links) %>%                                       # Check for links in all R scripts
bind_rows()
From <- select(all, -To) %>%                                              # Grab just the files creating objects
drop_na()
To <- select(all, -From) %>%                                              # Grab just the files reading in objects
drop_na()
#### Format for a network graph ####
nodes <- data.frame(id = seq(1:length(unique(Scripts$Script))),
label = as.character(unique(Scripts$Script))) %>%
separate(label, into = c(NA, "label"), sep = "~/R scripts/")
Edges <- full_join(From, To) %>%                                          # Join Tos and Froms by the shared object
drop_na() %>%
bind_rows(filter(all, is.na(Object)))  %>%                              # Add in the relationships to functions files, which aren't mediated by an object
distinct() %>%                                                          # Remove any repeated links
left_join(nodes, by = c("From" = "label")) %>%                          # add in numerical code for scripts
select(-From, from = id) %>%                                            # relabel
left_join(nodes, by = c("To" = "label")) %>%                            # repeat relabelling for to column
select(-To, to = id) %>%
mutate(arrows = "middle")                                               # Add arrows in the middle of the edge when plotting
nodes <- mutate(nodes, shape = ifelse(grepl("FUNCTIONS", label),"diamond", "dot")) %>% # Add shape to nodes now join is finished
separate(label, into = c("group", NA), remove = F)                         # Add a group field for colour
##### Graph it ####
library(visNetwork)
visNetwork(nodes, Edges, width = "100%", height = "750") %>%          # Build the network
visLayout(randomSeed = 10) %>%                                            # Control the randomisation of the layout
visLegend(width = 0.15) %>%                                      # Add a legend
visOptions(highlightNearest = list(enabled = TRUE, labelOnly = FALSE),     # Control the highlighting when you select a script
nodesIdSelection = TRUE) %>%                                    # Allow the user to select a script from a drop down list
visGroups(groupname = "bathymetry", shape = "dot", color = list(background = "grey", border = "black", # Control colouring and highlighting per group
highlight = list(background = "white", border = "black"))) %>%
visGroups(groupname = "NM", shape = "dot",color = list(background = "orange", border = "darkorange",
highlight = list(background = "white", border = "darkorange"))) %>%
visGroups(groupname = "bounds", shape = "dot", color = list(background = "#97C2FC", border = "#2B7CE9",
highlight = list(background = "white", border = "#2B7CE9"))) %>%
visGroups(groupname = "gfw", shape = "dot",color = list(background = "violet", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "ices", shape = "dot",color = list(background = "purple", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "sediment", shape = "dot", color = list(background = "yellow", border = "orange",
highlight = list(background = "white", border = "orange"))) %>%
visGroups(groupname = "StrathE2E", shape = "dot", color = list(background = "green", border = "darkgreen",
highlight = list(background = "white", border = "darkgreen")))
# visSave(toy, file = "code network.html")                                    # Save as HTML file
## Automatically trawl my R scripts to find objects being written and read,
## and then connect these scripts for a network graph
library(tidyverse)
Scripts <- list.files("~/R scripts",  pattern = ".R", full.names = T) %>% # Read in all the Rscripts
as.data.frame() %>%
filter(!grepl('@|X_|Z_', .)) %>%                                        # Ignore files labelled in these ways
mutate(Script = as.character(.)) %>%
separate(Script, into = c(NA, "Script"), sep = "R scripts") %>%         # Drop long, specific, path lead
mutate(Script = paste0("~/R scripts", Script)) %>%                      # Replace with relative path lead
select(-.)
Links <- function(script) {
#script <- Scripts[16,1]                                                  # Testing
example <- readLines(script)                                              # Get each line in a script as a character vector
imports <- grepl("readRDS\\(", example)                                   # Which lines use readRDS
exports <- grepl("saveRDS\\(", example)                                   # Which lines use saveRDS
functions <- grepl("source\\(", example)                                  # Does the script call a function file?
From <- example[exports] %>%                                              # Which objects come from this script
data.frame(Object = .) %>%                                              # A column of objects being saved
mutate(Object = as.character(Object),
From = script) %>%                                               # Attach the script name
separate(From, into = c(NA, "From"), sep = "~/R scripts/") %>%          # Shrink the script name
separate(Object, into = c(NA, "Object"), sep = "[~)]")                  # Isolate the object name between "~ and )"
To <- example[imports] %>%                                                # Which objects are read into this script
data.frame(Object = .) %>%
mutate(Object = as.character(Object),
To = script) %>%
separate(To, into = c(NA, "To"), sep = "~/R scripts/") %>%              # Shrink the script name
separate(Object, into = c(NA, "Object"), sep = "[~)]")                  # Isolate the file name between "~ and )"
Functions <- example[functions] %>%
data.frame(From = .) %>%
mutate(From = as.character(From),
To = script) %>%
separate(From, into = c(NA, "From"), sep = "~/R scripts/") %>%          # Shrink the script name
separate(To, into = c(NA, "To"), sep = "~/R scripts/") %>%              # Shrink the script name
separate(From, into = c("From", NA), sep = " ") %>%                     # Shrink the script name
mutate(From = paste(From, "FUNCTIONS.R"))
Links <- bind_rows(From, To) %>%
bind_rows(Functions)
return(Links)
}    # Function to return the files read and saved by a script, and any function files called
#### Establish the relations file ####
Scripts2 <- filter(Scripts, !grepl('FUNCTIONS', Scripts$Script))          # Ignore functions files as relationships aren't object mediated (but keep Scripts for defining nodes later)
all <- map(Scripts2[,1], Links) %>%                                       # Check for links in all R scripts
bind_rows()
From <- select(all, -To) %>%                                              # Grab just the files creating objects
drop_na()
To <- select(all, -From) %>%                                              # Grab just the files reading in objects
drop_na()
#### Format for a network graph ####
nodes <- data.frame(id = seq(1:length(unique(Scripts$Script))),
label = as.character(unique(Scripts$Script))) %>%
separate(label, into = c(NA, "label"), sep = "~/R scripts/")
Edges <- full_join(From, To) %>%                                          # Join Tos and Froms by the shared object
drop_na() %>%
bind_rows(filter(all, is.na(Object)))  %>%                              # Add in the relationships to functions files, which aren't mediated by an object
distinct() %>%                                                          # Remove any repeated links
left_join(nodes, by = c("From" = "label")) %>%                          # add in numerical code for scripts
select(-From, from = id) %>%                                            # relabel
left_join(nodes, by = c("To" = "label")) %>%                            # repeat relabelling for to column
select(-To, to = id) %>%
mutate(arrows = "middle")                                               # Add arrows in the middle of the edge when plotting
nodes <- mutate(nodes, shape = ifelse(grepl("FUNCTIONS", label),"diamond", "dot")) %>% # Add shape to nodes now join is finished
separate(label, into = c("group", NA), remove = F)                         # Add a group field for colour
##### Graph it ####
library(visNetwork)
visNetwork(nodes, Edges, width = "100%", height = "750") %>%          # Build the network
visLayout(randomSeed = 10) %>%                                            # Control the randomisation of the layout
visLegend(width = 0.15) %>%                                      # Add a legend
visOptions(highlightNearest = list(enabled = TRUE, labelOnly = FALSE),     # Control the highlighting when you select a script
nodesIdSelection = TRUE) %>%                                    # Allow the user to select a script from a drop down list
visGroups(groupname = "bathymetry", shape = "dot", color = list(background = "grey", border = "black", # Control colouring and highlighting per group
highlight = list(background = "white", border = "black"))) %>%
visGroups(groupname = "NM", shape = "dot",color = list(background = "orange", border = "darkorange",
highlight = list(background = "white", border = "darkorange"))) %>%
visGroups(groupname = "bounds", shape = "dot", color = list(background = "#97C2FC", border = "#2B7CE9",
highlight = list(background = "white", border = "#2B7CE9"))) %>%
visGroups(groupname = "gfw", shape = "dot",color = list(background = "violet", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "ices", shape = "dot",color = list(background = "purple", border = "purple",
highlight = list(background = "white", border = "purple"))) %>%
visGroups(groupname = "sediment", shape = "dot", color = list(background = "yellow", border = "orange",
highlight = list(background = "white", border = "orange"))) %>%
visGroups(groupname = "StrathE2E", shape = "dot", color = list(background = "green", border = "darkgreen",
highlight = list(background = "white", border = "darkgreen")))
# visSave(toy, file = "code network.html")                                    # Save as HTML file
# Open the GEBCO netcdf file and limit to a workable size, reshape for tidyverse, and extract contours
#### Set up ####
rm(list=ls())                                                   # Wipe the brain
packages <- c("tidyverse", "data.table", "ncdf4", "stars")      # List packages
lapply(packages, library, character.only = TRUE)                # Load packages
#### Pull the contents of Netcdf file ####
nc_raw <- nc_open("Data/GEBCO_2019.nc")                         # Open up the netcdf file to see it's raw contents (var names)
nc_lat <- ncvar_get(nc_raw, "lat")                              # Extract a matrix of all the latitudes
nc_lon <- ncvar_get(nc_raw, "lon")                              # Extract a matrix of all the longitudes
nc_close(nc_raw)                                                # You must close an open netcdf file when finished to avoid data loss
rm(nc_raw)
#### Shrink to Arctic ####
## Things are a bit large to work with, so lets try a conservative crop of the data to help. -100,0,120,90 is visible in the polar projection I'm using
# Clip longitudes
W100 <- 80/360 * length(nc_lon)
E120 <- 300/360 * length(nc_lon)                                # What positions in the vector are -100 & 120 Degrees W?
nc_lon <-nc_lon[c(W100:E120)]                                   # Clip to mid longitudes
# Clip latitudes
Equator <- nrow(nc_lat)/2                                       # Where does southern hemisphere start?
nc_lat <- nc_lat[c(Equator:43200)] %>%                          # Drop second half of longitudes (0 - 90)
as.data.frame()                                               # Convert array to dataframe
# Pull restricted bathymetry
nc_raw <- nc_open("Data/GEBCO_2019.nc")                         # Open up the netcdf file to see it's raw contents (var names)
nc_bath <- ncvar_get(nc_raw, "elevation", start = c(W100, Equator),
count =c((E120-W100+1), (43200 - Equator+1))) # Extract a matrix of all the concentration estimates, reading in to the clipped area
nc_close(nc_raw)                                                # You must close an open netcdf file when finished to avoid data loss
rm(nc_raw)
nc_bath <- as.data.frame(nc_bath)
#### Extract contours ####
Con_bath <- nc_bath[seq(1, nrow(nc_bath), 8), seq(1, ncol(nc_bath), 8)] # reduce load further
Con_lon <- nc_lon[seq(1, length(nc_lon), 8)]                    # reduce load
Con_lat <- nc_lat[seq(1, nrow(nc_lat), 8),]                     # reduce load
cont <- contourLines(Con_lon, Con_lat, as.matrix(Con_bath),
levels = c(-30,-40,-50,-60,-200,-1000)) %>%# Extract contours
lapply(data.frame, stringsAsFactors = FALSE) %>%              # Convert results to dataframes
rbindlist(id = TRUE)                                          # Bind a list of dataframes (the fast way) with an id column
saveRDS(cont, file = "Object/Many_contours.rds")
#### Reduce resolution and reshape the full bathymetry file ####
nc_bath <- nc_bath[,-1]                                         # First latitude is negative causing problems
nc_lat <- nc_lat[-1,]
colnames(nc_bath) <- nc_lat                                     # Move latitudes into column names for gather call later
nc_lon <- nc_lon[seq(1, length(nc_lon), 2)]                     # Select every other longitude
nc_bath <- nc_bath[seq(1, nrow(nc_bath), 2), seq(1, ncol(nc_bath), 2)] %>%  # take every other column and row to reduce load
as.data.frame() %>%
add_column(Longitude = nc_lon) %>%                            # Add in longitudes
gather(key = "Latitude", value = "Elevation", 1:10800) %>%    # Convert to long format
dplyr::filter(Elevation < 0) %>%                              # Drop land data for space
mutate(Latitude = as.numeric(Latitude))                       # Change column type
saveRDS(nc_bath, file = "Object/Polar_Bathymetry_halfres.rds")
